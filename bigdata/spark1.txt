기본 자료형
자료형	사이즈	설명
Byte	8bit	-128~127
Short	16bit	-32768~32767
Int	32bit	-2147483648~2147483647
Long	64bit	-9223372036854775808~9223372036854775807
Float	32bit	-3.4E38~3.4E38
Double	64bit	-1.7E308~1.7E308
Char	16bit	문자형 표현
Boolean	1bit	논리형 참, 거짓 표현
참조 자료형
자료형	설명
String	문자열 표현
Unit	리턴값이 없음을 표현
Null	Null 값 표현
Nothing	모든 객체의 서브 타입
Any	모든 객체의 기본 타입
AnyVal	기본 값 타입의 부모 타입
AnyRef	참조 타입의 부모 타입


접두어s
접두어s는 ${변수명}을 이용하여 문자열안의 변수를 값으로 치환하여 줍니다. 계산식, 함수도 사용할 수 있습니다.
val name = "David"
// ${name}이 David로 변환 
scala> println(s"Hello! ${name}")
Hello! David

접두어 f
접두어f는 문자열 포맷팅을 처리합니다. 자바의 printf() 와 같은 방식으로 처리되고, 타입이 맞지 않으면 오류가 발생합니다.
val height:Double = 182.3 
val name = "James"
// f접두어를 이용한 값 변환 테스트 
scala> println(f"$name%s is $height%2.2f meters tall")
James is 182.30 meters tall

접두어 raw
접두어raw는 특수 문자를 처리하지 않고 원본 문자로 인식합니다. 특수문자를 그대로 입력해야 할 때 사용할 수 있습니다.
scala> raw"가\n나"
res3: String = 가\n나

케이스 클래스
스칼라에는 케이스 클래스라는 특수 클래스가 존재합니다. case를 이용하여 선언합니다. 일반 클래스와 달리 인스턴스를 생성할 때 new를 사용하지 않습니다.
// 케이스 클래스 Person 선언 
case class Person(name:String, age:Int)
var p = Person("철수", 15)

트레잇
트레잇(trait)은 자바의 인터페이스와 유사합니다. 메소드를 정의만 해놓을 수도 있고, 기본 구현을 할 수도 있습니다. 추상 클래스와 달리 생성자 파라미터는 가질 수 없습니다.
트레잇에서는 가변 변수, 불변 변수 모두 선언 가능합니다. 트레잇을 구현하는 클래스에서 가변 변수는 수정이 가능하지만, 불변 변수는 수정할 수 없습니다.
트레잇의 기본 메소드는 상속되고, override 키워드를 이용하여 메소드를 재정의 할 수도 있습니다. 트레잇은 extends로 상속하고 여러개의 트레잇을 with 키워드로 동시에 구현할 수 있습니다.
상속하여 구현할 수 있기 때문에 추상클래스와 유사하지만 멤버변수를 가질 수는 없습니다. 또한 추상클래스는 하나만 상속할 수 있지만, 트레잇은 여러개을 상속 할 수 있습니다. 생성자 멤버변수가 필요하면 추상클래스를 이용하는 것이 좋고, 멤버 변수가 필요 없다면 트레잇을 이용하는 것이 좋습니다.
// Machine 트레잇 
trait Machine {
  val serialNumber: Int = 1
  def work(message: String)
}

케이스 클래스
스칼라에는 케이스 클래스라는 특수 클래스가 존재합니다. case를 이용하여 선언합니다. 일반 클래스와 달리 인스턴스를 생성할 때 new를 사용하지 않습니다.

>패턴 매칭
스칼라의 패턴매칭은 자바의 case문과 유사하지만 더 강력한 기능을 제공합니다.
패턴매칭의 기본 문법은 다음과 같습니다. param의 값이 value1의 값과 비교되어 일치하는 값의 결과를 반환합니다. 언더바(_)는 어떤 값도 일치하지 않을 때 처리 결과를 출력합니다.
param match {
  case value1 => "value1"
  case _ => "default value"
}

>데이터 비교
케이스 클래스의 비교는 참조값을 이용하지 않고, 클래스의 멤버변수의 데이터를 이용하여 처리합니다.































