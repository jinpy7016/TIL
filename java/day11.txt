6월 3일 
자바 필답평가 25문제 예정
-Java의 기초 문법 
-Java의 OOP 구문
-Java의 기본 API 활용

자바 수행평가(코딩) 3문제 예정
-Java의 기초 문법 
-Java의 OOP 구문
-Java의 기본 API 활용

============================================================
java.lang.Object

객체.clone() -객체 복제

얕은 복사 -객체의 생성된 주소값을 할당하는 방식 유사(동일한 객체를 참조)
깊은 복사 -객체의 모든 속성을 새로 생성해서 메모리에 새로운 동일한 객체를 생성 방식
사용자 정의 클래스를 복제가능도록 하려면 Cloneable 구현,

Object의 equals() - 객체 생성 주소의 hash값을 비교
hashCode() - 객체 생성 주소의 hash값 리턴

Object obj = new Double();
실제 생성된 객체의 타입을 리턴받으려면...getClass()

Object의 toString() - 클래스 FullName@hash값

일반 메서드에서는 notify(), notifyAll(), wait() 호출 불가, synchronized가 선언된 메서드에서 호출가능 => 멀티 스레드 환경에서 

java.lang.String - 문자열 표현, 불변객체
String s = new String(new byte[]{65,66,67});
System.out.println(s); //System.out.println(s.toString())와 동일, ABC출력

String s2 = "java";
byte[] bytes =  s2.getBytes();
s2.charAt(0)
s2.substring(1, 3);
String newStr  =s.concat(s2); -> s객체 출력하면 "ABC"
contains()
문자열객체.equals(비교할 문자열객체) - 문자열의 내용을 비교
equalsIgnoreCase()
s2.length()
String s3 = "JackAndJue";
String s4 = s3.replace("J", "Bl"); =>s3객체 출력하면 "JackAndJue"

s3 = "   Jack  Jue   ";
s3.trim().length(); ==> 결과? 9

primitive data type을 문자열로 변환하려면 : String.valueOf() 또는 값+""

split(구분자 또는 정규표현식) - 문자열을 구분자로 쪼개어 문자열 배열로 리턴
join(결합문자, 문자열배열) - 문자열 배열의 요소를 하나씩 결합문자를 사용해서 하나의 결합된 문자열로 리턴

가변문자열은 StringBuffer
equals()
StringBuffer sb1 = new StringBuffer("java");
StringBuffer sb2 = new StringBuffer("java");
System.out.println(sb1.equals(s2)); //?
sb1.append("& sql"); //sb1의 출력내용은 "java& sql"
sb1.insert(4, " web ");
remove()
length()
substring()

수학계산에 유용한 메서드를 가지고 있는 클래스 java.lang.Math
생성자 private 이므로 new Math() 불가
모든 속성과 메서드는 static
abs()
max()
min()
log()
power()
sqrt()
round()
ceil()
floor()
cos()
...

모두 객체로 구현해야 할경우, primitive data type을 객체로 wrapping
boolean -> Boolean -> booleanValue()  문자열 "true" -> Boolean.parseBoolean()
byte -> Byte          byteValue()     문자열 "100" -> Byte.parseByte()
short -> Short        shortValue()
char -> Character     charValue()
int -> Integer        intValue()
long -> Long          longValue()
float -> Float        floatValue()
double -> Double      doubleValue()


객체가 null 또는 null이 아닌지 체크하거나 반드시 null이 아니어야 함을 메서드로 제공해주는 클래스 : java.util.Objects

String s = null;
s==null?
s!=null?


시스템의 현재시간을 utc기준 milli second로 리턴하는 메서드 : System.currentTimeMillis()


난수 생성 : Math.random()
            Random r = new Random()
ex) (int)(Math.random()*100 +1)
     Random r = new Random()
     r.nextInt(100)+1
     Random r = new Random(seed값)


정규표현식을 이용해서 데이터 처리해야 할 경우, 특정 패턴을 객체로 생성
1. java.util.regex.Pattern.compile("패턴") => Pattern 인스턴스 생성
2. Matcher m =  Pattern 인스턴스.matcher(처리할 대상 데이터) => Matcher 인스턴스 생성
3. m.matches() => true or false로 리턴

.  하나의 모든 문자
[a-zA-Z0-9] 범위
en$
^ab
[^0-9]
[0-9]?  zero or one
[0-9]+  one or more
[0-9]*  zero or more
{2, 5} 최소횟수, 최대횟수
{3}
\\d
\\D
\\w
\\W
\\s
\\S

표준출력 
1.5버전 이전에 한글을 포함한 키보드 입력을 받으려면
java.io.InputStream 바이트 최상위 스트림은 추상클래스
System.in 운영체제에 맞게 InputStream 구현 객체
문자 스트림은 XXXXReader, XXXWriter
try{
     BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
     String s = br.readLIne();
     //Integer.parseInt(s)
   }catch(IOException e){
   
   }finally{
       try{
           br.close();
          }catch(IOException e){
          }
   }


Scanner scan = new Scanner(System.in)
scan.next()
scan.nextLine()
scan.nextInt()
....

1.6버전에서는  System.console() 


==============================================================================








String s="월, 화, 수, 목, 금, 토, 일";
StringTokenizer sToken = new StringTokenizer(s, ",");
StringTokenizer는 내부에 포인터를 가지고 있고 구분자를 기준으로 포인터를 이동하면서 
hasNextTokens()메서드는 Token이 있으면 true를 리턴하고 없으면 false를 리턴합니다.
포인터가 가리키는 Token을 반환받으려면 nextToken() 메서드를 사용하며
이 과정을 반복문에서 수행합니다.















































