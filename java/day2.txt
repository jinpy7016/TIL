# 자바 특성
1.객체지향 언어 - 속성과 기능 설계는 클래스로 합니다.
(클래스 단위로 소스 코드 작성합니다.)
2. Platform(Hardware+OS) 독립적입니다. - once write, Run anywhere
(OS에 의존적인 부분의 실행환경을 제공해주는 JRE(JVM포함)가 있어야 합니다.)
3. 컴파일 + 인터프리터 언어 
(정적 언어 - 타입 정의(선언))
   이름.java 소스 코드 -> javac -> 중간언어Byte코드변환된 .class -> javac (바이트 코드 메모리에 로딩 -> validationS->실행)
4. Simple (기본 Data Type이 8개, pointer가 없고, 메모리 할당 해제는 Garbage Collector가 처리해줌, 유용한 클래스, 인터페이스 API 제공)
5. 멀티 스레드 프로그래밍 구현이 쉽다.
6. 네트워크, 분산 프로그래밍 구현 가능


자바는 대소문자 구별합니다.

<<식별자(변수, 메소드, 클래스이름) 이름규칙>>
첫문자는 영문자 또는 _, $만 허용
두번째 문자부터 숫자 허용
길이 제한은 없구요 
키워드 허용 안됨 
※ String 같은 API에서 제공되는 이름을 사용하지 않는 것이 좋습니다.


public class 이름 {
    //속성선언 => 변수, 상수,..
    //동작, 기능 정의 => 메서드
    public static void main(String[] args) {

    } 
}

서버없이 독립적으로 실행되는 standalone application은 JVM이 실행 메소드 public static void main(String[] args)를 호출해서 실행시킵니다.

자바의 문장은  ;으로 종료합니다.

자바에서 주석은 //, /* ~~~~~*/, 
/** api documentation의 description으로 포함되는 주석~~~~*/


표준출력 -화면출력(CRT) java.lang.System.out
표준입력 -키보드입력    java.lang.System.in


print()
println()
printf()

변수 -  메모리에 저장된 값을 참조하기 위한 이름
상수 - 메모리에 저장된 고정(불변)값을 참조하기 위한 이름

<<DataType - 메모리에 저장되는 값의 유형>>
Primitive Data Type - boolean, byte, short, int, long, char, float, double
하나의 값을 다루는 타입 , = 연산자와 함께 사용

Reference Data Type - class, interface, enum, 배열(array)
객체(속성+기능) 타입 - 1. 생성(new)  2. 초기화 
핸들변수(객체).속성 = 값
핸들변수(객체).메소드();
. 연산자와 함께 사용


boolean  - true와 false만 값으로 저장, 출력됨 1byte할당
           정수와 호환 불가(promotion, casting불가)
byte - 1byte할당 , sign bit,  -2^7~2^7-1, -128~127
short - 2byte할당, -2^15~2^15-1, -32768~32767
char - 2byte할당(0~2^16-1, 0~65535),하나의 문자를 저장할 수 있는 타입
       'A', 48, 65,97, 유니코드지원 , '\u0000'~'\uffff'
int - 4byte할당, -2^31~2^31-1, -2147483648~2147483647
       8진수값(예:0777), 16진수값(예:Oxff) 저장 가능, 출력은 10진수로 출력됨    

long - 8byte할당, -2^63~2^63-1
       long num = 2147483648L;
float -4byte할당    float f = 0.5F;
double -8byte할당   double d = 0.5;   double d = 0.5D;
        IEEE 형식값 저장 가능 0.00005 => 0.5E-4
                              41200000 =>4.12E+7

타입선언 변수; //선언만
타입선언 변수 = 값; //선언, 초기화


public class Test {
    //속성+기능
	int a; //멤버변수 , 인스턴스 변수
	public static void main(String[] args) {
		 int b; //로컬변수
		 System.out.println("test");
		 System.out.println(b);//초기화 안해서 오류
		 System.out.println(a);//객체 생성없이 사용해서 오류
	}
}
※ 메소드내부에 선언한 변수는 로컬변수이며, 사용전에 반드시 초기화해야 합니다.



자동형변환: 작은타입 -> 큰 타입으로 할당될때 JVM이 형 확장
명시적 형변환 : 큰타입의 값 -> 작은 타입의 변수에 할당할때 명시적 casting ,  작은타입 변수 = (타입)큰 타입의 값

char와 short는 서로간에 casting
byte와 char는 서로간에 casting


단항연산자 : +, -, ++, --, !, ~, ()
이항연산자 : 산술연산자 (*, /, %, +,-) 정수/정수=>정수
             비교연산자 ( >, >=, <, <=, ==, !=)
             비트연산자 (&, |, ^)
             논리연산자 (&&, ||)
             shift연산자 (<<, >>, >>>)
삼항연산자


<<제어문 - if, switch>>

if(조건표현식)  문장;


if(조건표현식) {
   문장;
   ...
}else {
   문장;
   ....
}


한문자를 입력 받아서 영문자 또는 숫자를 구별하여 출력합니다.
hint: 48~57 (ascii) 65~90(영문대문자) 97~122 (영문소문자)



<<다중 if문>>
if(조건표현식) {
   문장;
   ...
}else if(조건표현식) {
   문장;
   ....
}else if(조건표현식){
  문장;
   ....
}else{
  문장;
   ....
}


코딩 연습1>>
if문을 이용해서 정수 입력받아서 짝수 /홀수 판단, 출력합니다.

코딩 연습2>>
if문을 이용해서 점수 입력받아서 
100~90 A,
...
59~0는 F
출력하는 프로그램 코딩


if(조건1){
   if(조건2) {
       문장; //조건1 && 조건2 true일때
   }else {
       문장; //조건1은 true이고 조건2 false일때
   }
  [ 문장;] //조건1이 true일때 수행
}else{
  문장;  //조건1이 false일때 수행
}

코딩 연습3>>
년도를 4로 나누어서 나머지가 0이면 2월은 29일(윤년)
년도를 4로 나누어서 나머지가 0이고 100으로 나누어서 나머지가 0이면 2월은 28일(평년)
년도를 4로 나누어서 나머지가 0이고 400으로 나누어서 나머지가 0이면 2월은 29일(윤년)
년도를 4로 나누어지지 않으면 2월은 28일(평균)

2000년도는 윤년
2004년도는 윤년
2100년은 평년
2003년도는 평년


switch(표현식)
//표현식은 
정수 또는 문자열타입의 변수 
정수 또는 문자열를 리턴하는 메서드 
정수 또는 문자열를 리턴하는 연산식 
 
switch(표현식) {
 case 값1 : 문장; break; 
 case 값2 : 문장: break;
 ......

 default : 문장;
}


코딩 연습4>>
대소문자 구별 없이 영어문자 하나 입력받아서 
영문자로 시작하는 단어 출력합니다.
A, B, C만 처리하고 
나머지 문자는 "준비중입니다." 라고 출력합니다.


<<반복문>>
for반복문 : 반복 수행 횟수를 알때 사용
while반복문 : 반복 수행 조건을 알때 사용
do~while반복문 : 첫 수행 후 반복 수행 조건을 체크해서 true이면 계속 반복 수행합니다.

for (카운트변수 초기화 ; 반복횟수 조건식 ; 증감식) {
  반복 수행 문장;
  ...
}

for(int i=1;i<=10;i++){
   System.out.println(i);
}



반복문안에 반복문 사용가능
반복문안에 제어문 사용가능
서버/클라이언트 프로그램(예: 채팅, 게임) 구현시, 서버는 무한루프로 대기상태로 서비스 요청을 기다려야 합니다.
for( ;  ; ) {  } 무한루프는 반드시 반복문 내부에 종료 조건을 함께 사용해야 합니다.

for( ;  ; ) {
  .....
  if(종료조건) break;
  ...
}



















