날짜 데이터처리하면 날짜 데이터 표현
java.util.Date d = new Date();
d = new Date(long millisecond)

java.util.Calendar cal = Calendar.getInstance();
현재 월 => cal.get(Calendar.MONTH)

5월 31일 설정 => cal.set(2019, 4, 31)
6월 1일로 만들려면 cal.add(Calendar.DATE, 1)

날짜 데이터를 특정 형식으로 문자열화하려면 :  yyyy-MM-dd hh:mm:ss
java.text.SimpleDateFormat
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
Date d = new Date();
sdf.format(d);

숫자 데이터를 특정 형식으로 문자열화하려면
java.text.DecimalFormat
double won = 12345.678
DecimalFormat df = new DecimalFormat("\u00A4##,###.");
String s = df.format(won);

특정 형식으로 문자열화된 데이터를 숫자로 변환하려면
df.parse(s)

jdk 8 java.time 패키지가 추가
LocalDate today = LocalDate.now()
get()으로 Month값 반환받을때 1~12값 반환
LocalTime = LocalTime.now()

Collection (데이터 집합, 자료 구조)
Framework(표준화된 설계)

배열 - 생성시에 배열의 크기를 반드시 설정해야 하고, 저장될 요소의 크기가 정적입니다. (동적 변경 불가)
Collection - 생성시에 저장될 요소의 크기를 설정하지 않아도 되고, 동적으로 요소가 저장될 크기는 변경됩니다



Collection - List, Set
List<Book> - 저장한 순서 보장, 중복된 객체 저장, 인덱스(offset)으로 저장된 요소를 처리 가능
       ArrayList > (단일스레드환경), Vector(멀티스레드), LinkedList, Stack       
       add(객체), add(index, 객체)
       clear(), removeAll()
       remove(객체), remove(index)
       size()
       contains()
       get(index)
Iterator<Book>  - iterator()       
       while(iterator.hasNext()){
         Book b=   iterator.next();
       }
Enumeration - hasMoreElement(), nextElement()


Set - 중복 객체 저장 불가, 순서 보장 안됨

Map - key객체와 value객체를 매핑해서 저장












































