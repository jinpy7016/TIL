http 요청 메세지를 전송한 클라이언트 ip정보 추출 >
HttpServletRequest.getRemoteAddr();

http 요청 메시지를 전송한 방식 정보 추출 > 
HttpServletRequest.getMethod();

WAS가 서비스하는 웹 컨텍스트를 생성하면 웹 컨텍스트를 추상화한 객체 : ServletContext

요청한 웹 컨텍스트의 객체를 반환하는 메서드 >
HttpServletRequest.getServletContext();

클라이언트가 form 태그내에 data를 서버 웹 컴포넌트로 전송,
서버 웹 컴포넌트에서 클라이언트가 보낸 form 데이터 추출하려면?
HttpServletRequest.getParameter("input 요소의 name속성값");
checkbox input요소의 checked 요소의 value들을 추출 String[] 반환
HttpServletRequest.getParameterValues("input 요소의 name속성값");
ex) 1. memberform.html요청 (단순페이지 요청: get방식)
    2. HttpListener가 html페이지 응답
    3. 클라이언트가 데이터 입력하고 form data 전송
	<form action="./join" method="" encType="multipart/formdata" >
    4. @WebServlet("/join") : 선언된 서블릿이 요청을 받아서 응답 처리 
	@MultipartConfig(location="", maxFileSize="", maxRequestSize="") : 파일 업로드 처리하는 서블릿에 선언할 Annotation
	업로드된 파일의 메타정보와 스트림등을 추출하기 위해 반환 객체
	HttpServletRequest.getPart(); : part
	HttpServletRequest.getParts(); : collection<part>
	Part.getName() : 업로드된 파일 이름 반환
	Part.getContentType() : 업로드된 파일의 유형을 반환
	Part.getSize() : 업로드된 파일 사이즈 반환
	Part.write() : 업로드돤 파일을 @MultipartConfig의 location에 출력(서버에 파일로 생성,기록)
	
# 요청을 동일한 웹 컨텍스트의 다른 servlet 또는 jsp에 전송 가능
servletContext sc = request.getServletContext(); //요청 웹 컨텍스트 객체 반환
RequestDispatcher rd = sc.getRequestDispatcher("/다른 servlet 또는 jsp 경로");//요청을 전달한?할
rd.forward(request, response);
rd.include(request, response);

HttpServletRequest.setAttribute(키로 사용될 객체, 값 객체);
HttpServletRequest.getAttribute(키); : object로 반환되므로 실제 저장한 타입으로 변환

<a href="./xxx?paramname=paramvalue&paramname=paramvalue&...">요청 전달</a> : 전송 방식 Get방식

Http 특성은 요청시 Connction되며, 응답이 전송되면 disconnect됩니다. => 비연결형 protocol
상태 정보를 저장할 방법 : 
1. 클라이언트 브라우저에 저장 (key=value) : Cookie , setMaxAge()
2. url의 쿼리 스트링으로 요청시마다 전송
3. 요청을 전송하는 페이지에 form요소로 <input type="hidden" name="" value="">
4. 웹 서버에 객체로 저장 : Session, 클라이언트의 브라우저 종료되어 세션이 종료될때까지만 


1.클라이언트가 특정 웹 서버(tomcat)로 요청을 전송
2.웹 서버가 클라이언트 요청에 대해 응답을 할때 해시 함수 기반JSessionID 값을 생성해서 쿠키로 전송.
3.클라이언트가 웹 서버로 두번째, 세번째, ...요청할 때 마다 브라우저 자체적으로 요청 웹 서버에서 보내준 쿠키 정보를 찾아서 전송
4.웹 서버의 웹 컴포넌트(서블릿)에서 요청과 함께 전송된 쿠키 정보를 추출하려면
  HttpServletRequest.getCookies() : Cookie[]

new Cookie(key, name)객체를 응답으로 전송하려면 HttpServletResponse.addCookie();
ex) 1. http://ip:port/web1/cookieLogin 요청
    2. @WebServlet("/cookieLogin") 서블릿의 doGet() 요청 처리
     - 쿠키 정보 추출 request.getCookies(), userid키로 저장된 값 검색
     - 추출한 쿠키 정보를 request.setAttribute("userid" 쿠키값);
     - RequestDispatcher를 사용해서 "/cookie_login.jsp"로 전달
    3. form태그 전송 ( action ="cookieLogin" method="post")
    4. @WebServlet("/cookieLogin") 서블릿의 doPost() 요청 처리
     - 로그인 처리
     - 아이디 저장 checkbox 선택된 경우 userid를 쿠키로 저장
     - RequestDispatcher를 사용해서 "/amin.jsp"로 전달
    5. main.jsp에서 로그아웃(/cookieLogout) 요청 (GET 방식)
    6. @WebServlet("/cookieLogout") 서블릿 의 doGet() 요청 처리
     - 쿠키 정보 삭제 request.getCookies(), 쿠키 정보 추출해서 cookie.setMaxAge(0)으로 삭제
     - RequestDispatcher를 사용해서 다시 로그인 페이지로 전송

JSP - 스크립트, HTML태그와 함께 java 코드 포함
	view와 로직이 분리 안되어 재사용성이 낮음, 페이지단위로 개발

servlet > jsp > ejb > mvc패턴 애플리케이션 구현(view는 jsp, controller는 servlet, data 영속성과 비지니스로직은 javaobject)

현재 jsp는 mvc구조에서 view로만 제한하며, 태그와 EL(expression language) 만 사용

#JSP요소
정적 지시자 <%@ page ~~~~ %>
	<%@ include~~~ %>
	<%@ taglib~~~ %>
동적 지시자 <jsp:include ~ ></jsp:include>
	<jsp:useBean ~ > <jsp:getProperty ~ /> <jsp:setProperty ~ /> ....

declare scriptlet <%!
	변수 선언 초기화; //변환된 서블릿의 멤버변수로 정의
	public void method(){
		문장;
	}//변환된 서블릿의 멤버 메서드로 정의
%>

scriptlet <%
	자바 실행 문장 ; //변환된 서블릿의 _service()의 실행문장으로 ~~
	....
	%>

expression <%= 출력내용 %> 은 <% out.println(출력내용) %> 와 동일함

































